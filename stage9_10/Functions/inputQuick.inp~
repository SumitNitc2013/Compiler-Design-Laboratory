decl
	integer A[20];
integer quicksort(integer lo,hi);
	integer partition(integer lo,hi);
enddecl

integer quicksort(integer lo, hi){
	decl
		integer p, temp;
	enddecl
	begin
		if (lo < hi) then
			p = partition(lo, hi);
			temp = quicksort(lo, p-1);
			temp = quicksort(p+1, hi);
		endif;
		return 0;
	end
}

integer partition(integer lo, hi){
	decl	
		integer pivot, i, j, temp;
	enddecl
	begin
		pivot = A[hi];
		j = lo;
		i = lo;
		while (j < hi) do
			if(A[j] <= pivot) then
				temp = A[i];
				A[i]=A[j];
				A[j]=temp;
				i = i+1;
			endif;
			j = j+1;
		endwhile;
		temp = A[i];
		A[i]=A[hi];
		A[hi]=temp;
		return i;
	end
}

integer main(){
decl
	integer i, n, result;
enddecl
begin
	read(n);
	i = 0;
	while(i<n) do
		read(A[i]);
		i = i+1;
	endwhile;
	
	result = quicksort(0,n-1);
	
	i = 0;
	while(i<n) do
		write(A[i]);
		i = i+1;
	endwhile;
	
	return 0;
end
}
